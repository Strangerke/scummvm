
(*         Constantes, Types et Variables pour le

              M A N O I R   DE   M O R T E V I E L L E

                                                    ( version Nov 1988
                                                             +
                                                  musique & paroles Oct 88 )
                                                                             *)


(*---------------------------------------------------------------------------*)
(*-------------------------   CONSTANTES   ----------------------------------*)
(*---------------------------------------------------------------------------*)

const
       freq0 = 1.19318e6;

       seg_syst = $6FED;
       segmou   = $6F00;
       segdon   = $6C00;
       adani    = $7314;
       adword   = $4000;
       adtroct  = $406B;
       adcfiec  = $4300;
       adbruit  = $5CB0;(*2C00;*)
       adbruit1 = $6924;(*3874;*)
       adbruit2 = $6B30;(*3A80;*)
       adbruit3 = $6BA6;(*3AF6;*)
       adbruit5 = $3B50;
       adson    = $5CB0;(*2C00;*)
       adson2   = $60B0;(*3000;*)
       offsetb1 = 6;
       offsetb2 = 4;
       offsetb3 = 6;

       null = 255;

       tempo_mus   = 71;
       tempo_bruit = 78;
       tempo_f     = 80;
       tempo_m     = 89;

       ti1 = 410;
       ti2 = 250;
       Maxti = 7975;
       Maxtd = 600;
       Max_rect = 14;

       ams  = 0;
       cga  = 1;
       ega  = 2;
       her  = 3;
       tan  = 4;

       c_repon   =    0;
       c_st41    =  186;
       c_tparler =  247;
       c_paroles =  292;
       c_tmlieu  =  435;
       c_dialpre =  456;
       c_action  =  476;
       c_saction =  497;
       c_dis     =  502;
       c_fin     =  510;    {  =>   n'existe pas  ; si !! }

       arega  =     0;
       asoul  =   154;
       aouvr  =   282;
       achai  =   387;
       acha   =   492;
       arcf   =  1272;
       arep   =  1314;
       amzon  =  1650;
       fleche =  1758;

       no_choice = 0;
       invent    = 1;
       depla     = 2;
       action    = 3;
       saction   = 4;
       discut    = 5;
       fichier   = 6;
       sauve     = 7;
       charge    = 8;

       attacher= $301;
       attendre= $302;
       defoncer= $303;
       dormir  = $304;
       ecouter = $305;
       entrer  = $306;
       fermer  = $307;
       fouiller= $308;
       frapper = $309;
       gratter = $30A;
       lire    = $30B;
       manger  = $30C;
       mettre  = $30D;
       ouvrir  = $30E;
       prendre = $30F;
       regarder= $310;
       sentir  = $311;
       sonder  = $312;
       sortir  = $313;
       soulever= $314;
       tourner = $315;

       scacher  = $401;
       sfouiller= $402;
       slire    = $403;
       sposer   = $404;
       sregarder= $405;

         tabdbc : array[0..17] of byte
                 =(7, 23, 7, 14, 13, 9, 14, 9, 5, 12, 6, 12, 13, 4, 0, 4, 5, 9);
         tabdph : array[0..15] of byte
                 =(0, 10, 2, 0, 2, 10, 3, 0, 3, 7, 5, 0, 6, 7, 7, 10);
         typcon : array[0..25] of byte
                 =(0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 2, 3);
         intcon : array[0..25] of byte
                 =(1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0);
         tnocon : array[0..363] of byte
                 =(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                   0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,
                   0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,
                   0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,
                   0,0,0,0,0,1,0,0,0,0,0,0,0,0,1,1,1,0,0,0,0,0,0,0,0,0,
                   0,0,0,0,0,1,0,0,0,0,0,0,0,1,1,1,1,0,0,0,0,0,0,0,0,0,
                   0,0,0,0,0,1,0,0,0,0,0,0,0,1,1,1,1,0,0,0,0,0,0,0,0,0,
                   0,0,0,0,0,1,0,0,0,0,0,0,0,1,1,1,1,0,0,0,0,0,0,0,0,0,
                   0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,
                   0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,
                   0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,
                   0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                   0,0,0,0,0,1,0,0,0,0,0,0,0,1,1,1,0,0,0,0,0,0,0,0,0,0,
                   0,0,0,0,0,1,0,0,0,0,0,0,0,1,1,1,0,0,0,0,0,0,0,0,0,0);


     don :array[1..8,1..4] of byte
               =(( 7, 37, 22,  8),
                 (19, 33, 23,  7),
                 (31, 89, 10, 21),
                 (43, 25, 11,  5),
                 (55, 37,  5,  8),
                 (64, 13, 11,  2),
                 (62, 22, 13,  4),
                 (62, 25, 13,  5));

     fic : array[1..2] of string[11]
           = ( ' Sauvegarde',
               ' Chargement' );

     addv : array[0..1] of byte
          = (8,8);

     recom =' Recommence  ';

            f3 = 'F3: Encore';
            f8 = 'F8: Suite';

         Max_patt = 20;


        Rang : array[0..15] of byte
             =(15,14,11,7,13,12,10,6,9,5,3,1,2,4,8,0);


(*---------------------------------------------------------------------------*)
(*--------------------------------   TYPES   --------------------------------*)
(*---------------------------------------------------------------------------*)

type   path_chars   =  string[11];
       long_integer =  real;
       str255       =  string[255];
       str125       =  string[125];
       str30        =  string[30];
       str11        =  string[11];
       fichier_byte =  file of byte;
       sav_chaine   =  record
                         conf : integer;
                         pourc : array[0..10] of char;
                        teauto : array[0..42] of char;
                          sjer : array[0..30] of char;
                        mlieu,iboul,ibag,icave,ivier,ipuit : integer;
                        derobj,iloic,icryp : integer;
                         ipre : boolean;
                        heure : char;
                     end;
    registres = record
                  ax,bx,cx,dx,bp,si,di,ds,es,flags : integer;
                end;
     phrase = array [1..1410] of char;
     tabint = array [0..Maxti] of integer;
        ind = record
                indis : integer;
                point : byte
              end;
     tabind = array [0..Maxtd] of ind;

     tab_mlieu = array[1..7,0..24] of byte;

        table = array[0..255] of real;
      tablint = array[0..255] of integer;

         word = integer;
      chariot = record
                  val,
                  code,
                  acc,
                  freq,
                  rep :integer;
                end;

   doublet = record
               x,y:byte;
             end;
     tabdb = array[1..16] of doublet;
     tfxx  = array[0..107] of integer;
     rectangle = record
                   x1, x2, y1, y2 : integer;
                   Etat : boolean;
                 end;

     mult_rect = array[1..Max_rect] of rectangle;
     str40 = string[40];

        pattern = record
                    tay, tax : byte;
                    des : array[1..Max_patt, 1..Max_patt] of byte;
                  end;


         nhom = record
                  n : byte;   (* numero entre 0 et 32 *)
                  hom : array[0..3] of byte;
                end;

         t_nhom = array[0..15] of nhom;

         t_pcga = record
                    p : byte;
                    a : t_nhom;
                  end;

         pal_cga = array[0..90] of t_pcga;


(*---------------------------------------------------------------------------*)
(*------------------------------   VARIABLES   ------------------------------*)
(*---------------------------------------------------------------------------*)

var
     blo,
     bh1,
     bf1,
     bh2,
     bh4,
     bf4,
     bh5,
     bh6,
     bh8,
     bt3,
     bt7,
     bh9,

     sonoff,
     main,
     choisi,
     test0,
     f2_all,
     imen,
     cache,
     iesc,
     perdu,
     col,
     syn,
     fouil,
     zuul,
     tesok,
     obpart,
     okdes,
     solu,
     arret,
     anyone,
     brt,
     rect,
     rech_cfiec,
     active_menu : boolean;


     x,
     y,
     t,
     vj,
     li,
     vh,
     vm,
     jh,
     mh,
     cs,
     Gd,                (*  Gd = graph device  *)
     hdb,
     hfb,
     heu,
     jou,
     key,
     min,
     num,
     max,
     res,
     ment,
     haut,
     caff,
     maff,
     crep,
     ades,
     iouv,
     inei,
     ctrm,
     dobj,
     msg3,
     msg4,
     mlec,
     newGd,
     c_zzz,
     mchai,
     menup,
     ipers,
     ledeb,
     lefin,
     mpers,
     mnumo,
     xprec,
     yprec,
     perdep,
     prebru,
     typlec,
     num_ph,
     xwhere,
     ywhere,
     numpal,
     lderobj,
     nb_word,
     ptr_oct,
     k_tempo,
     ptr_tcph,
     ptr_word,
     color_txt : integer;

    t_cph  : array[0..6400] of integer;
    tabdon : array[0..4000] of byte;
 (*   t_dxx  : array[0..121] of integer;*)
    stpou  : str125;                             (* donne le % d'indices *)
    is     : byte;
    mode   : char;
    ficdes : fichier_byte;
   al_mess,
  err_mess,
  ind_mess,
  al_mess2 : str125;

      invt,
     nbrep,
    nbrepm,
      disc : array[1..8] of integer;
       msg : array [0..4] of integer;
      depl : array[1..7] of integer;
      inv  : array[1..8] of string[22];
      dep  : array[1..7] of string[23];
      act  : array[1..21] of string[10];
      self : array[1..5] of string[11];
      dis  : array[1..8] of string[5];
      touv : array[1..7] of char;
      s,s1 : sav_chaine;
    bufcha : array[0..390] of byte;

   lettres : array[1..6,0..23] of byte;

    PalHer : array[0..15] of byte;

         T_mot : tabint;
     Tay_Tchar : integer;
         T_rec : tabind;
        Sauv_T : file of ind;
        FiByte : file;
        v_lieu : tab_mlieu;
             l : tfxx;
           Tbi : tablint;
    c1, c2, c3 : chariot;
        addfix : real;
        palsav : pal_cga;
        Tabpal : array[0..90] of tabdb;
        palcga : pal_cga;
           tpt : array [0..14] of pattern;



(*---------------------------------------------------------------------------*)
(*--------------------   PROCEDURES  ET  FONCTIONS   ------------------------*)
(*---------------------------------------------------------------------------*)

procedure box(c,Gd,xo,yo,xi,yi,patt:integer); external 'c:\mc\boite.com';

procedure hirs;
const tandy:array[0..13] of byte
           =(113,80,90,14,63,6,50,56,2,3,6,7,0,0);
      herc:array[0..12] of byte
        =(50,40,41,9,103,3,100,100,2,3,0,0,0);
   var i, j : integer;
begin
  case Gd of
    cga :
     begin
       graphcolormode;
       graphbackground(0);
       Palette(1);
       res:=1;
     end;
    ams :
     begin
       hires;
       inline($B8/6/0/        (*  =>  mov ax,6 *)
              $CD/$10);       (*  =>  int 16   *)
       port[$3D9]:=15;
       port[$3DF]:=0;
       port[$3DD]:=15;
       res:=2;
     end;
    ega :
     begin
       inline($B8 / 14 / 0 /     (*  MOV AX, 14   ; mode video 14 = 640*200 16 couleurs *)
              $CD / $10);        (*  INT 16  *)
       res:=2;
     end;
    her :
     begin
       port[$3BF]:=3;
       port[$3B8]:=2;
       for i:=0 to 12 do
       begin
         port[$3B4]:=i;
         port[$3B5]:=herc[i];
       end;
       inline($FC/$B9/$00/$80/$B8/$00/$B0/$8E/$C0/$31/$FF/$31/$C0/$F3/$AB);
       port[$3B8]:=10;
       res:=2;
     end;
    tan :
     begin
       port[$3D8]:=0;
       port[$3DA]:=3;
       port[$3DE]:=$14;
       for i:=0 to 13 do
         begin
           port[$3D4]:=i;
           port[$3D5]:=tandy[i];
         end;
       port[$3DA]:=2;
       port[$3DE]:=0;
       port[$3D8]:=port[$3D8] or 11 and $EF;
       port[$3Dd]:=port[$3Dd] or 1;
       port[$3DF]:=port[$3DF] or $c0;
       box(0,gd,0,0,640,200,255);
       res:=1;
     end;
  end;
end;

procedure affput(Chx,Gd,x,y,coul,char:integer);external 'c:\mc\divaf.com';

procedure affcar(Gd,x,y,coul,char:integer);
begin
  if res=1 then affput(1,Gd,(x shr 1),y,coul,char)
           else affput(1,Gd,x,y,coul,char);
end;

procedure putpix(Gd,x,y,coul:integer);
begin
  affput(0,Gd,x,y,coul,0);
end;
